package org.example.service;

import org.example.util.FileReaderUtil;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import static org.example.util.FileReaderUtil.readCSVFile;
import static org.example.util.FileReaderUtil.readExcelFile;

@Service
public class SmartSolveAutomationService {
    @Autowired
    private WebDriver webDriver;
    // 在 SmartSolveAutomationService 类中添加一个成员变量来存储窗口句柄
    private List<String> windowHandlesList = new ArrayList<>();

    public void automateAndDownloadFile() {
        // 导航到网站
        webDriver.get("https://siemens.pilgrimasp.com/prod/smartsolve/Pages/Dashboard.aspx#/load?tabId=Home&searchPage=%7B-au-%7DPages/SmartPortal.aspx");
        // 等待1分钟 来让用户登录！ 测试发现 上午需要登录 下午不需要登录
        try {
            Thread.sleep(30000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("user should login and load the home page!");

        // 跳转到RRU dashboard对应的界面
        webDriver.get("https://siemens.pilgrimasp.com/prod/smartsolve/Pages/Dashboard.aspx#/load?tabId=Home&searchPage=%7B-au-%7DPages/SmartPortal.aspx%7B-qm-%7DItmId%7B-eq-%7D0000000000000002147484680");
        try {
            Thread.sleep(15000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("load the RRU Dashboard page!");

        // 切换到第一层iframe
        WebDriverWait wait = new WebDriverWait(webDriver, Duration.ofSeconds(15));
        WebElement iframe = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("search-pane-content-iframe")));
        webDriver.switchTo().frame(iframe);
        System.out.println("Switch to another frame!");

        // 切换到第二层iframe
        String secondIframeId = "wpManager_wp202144868_wp790622277_iframe1";
        WebElement secondIframe = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(secondIframeId)));
        webDriver.switchTo().frame(secondIframe);
        System.out.println("Switch to the second frame!");

        //等待80s文件下载完毕以后 关闭浏览器
        try {
            Thread.sleep(30000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // 记录当前的窗口句柄
        windowHandlesList.add(webDriver.getWindowHandle());

        // todo 打印出当前页面的完整 HTML 内容
//        String pageSource = webDriver.getPageSource();
//        System.out.println(pageSource);
        // 保存 HTML 内容到文件
//        try (FileWriter writer = new FileWriter("page_source.html")) {
//            writer.write(pageSource);
//            System.out.println("HTML 内容已保存到 page_source.html 文件中。");
//        } catch (IOException e)
        //webDriver.quit();

        //读取已处理numbers文件的log
        String logFilePath = "C:\\Users\\z0052cmr\\IdeaProjects\\OverseasAutomationTool\\src\\main\\resources\\SiemensLog_Report_Number.csv";
        List<String> complaintNumbers = FileReaderUtil.readCSVFile(logFilePath);


        // 页码相关的信息 和 下一页 的button
        WebElement totalPages = webDriver.findElement(By.xpath("/html/body/form/div[4]/div[6]/table/tbody/tr/td/div/table[2]/tbody/tr[1]/td/div[2]/table/tfoot/tr/td/table/tbody/tr/td/div[5]/strong[2]/span"));
        WebElement totalItems = webDriver.findElement(By.xpath("/html/body/form/div[4]/div[6]/table/tbody/tr/td/div/table[2]/tbody/tr[1]/td/div[2]/table/tfoot/tr/td/table/tbody/tr/td/div[5]/strong[5]/span"));
        // todo 这个button会随着 页面的切换而失效 记得修改
        //WebElement nextPageButton = webDriver.findElement(By.xpath("/html/body/form/div[4]/div[6]/table/tbody/tr/td/div/table[2]/tbody/tr[1]/td/div[2]/table/tfoot/tr/td/table/tbody/tr/td/div[3]/input[1]"));


        int totalPagesCount = Integer.parseInt(totalPages.getText());
        int totalItemsCount = Integer.parseInt(totalItems.getText());

        System.out.println("Total Pages: " + totalPagesCount);
        System.out.println("Total Items: " + totalItemsCount);
        // todo 用一个list来记录当日 符合条件的recordnumber
        boolean flag = false;
        for (int i = 1; i <= totalPagesCount; i++) {
            System.out.println("当前页码");
            System.out.println(i);
            // 处理当前页面的元素 根据tbody获取所有的行
            // 找到表格的 tbody 的元素
            WebElement tbody = webDriver.findElement(By.xpath("/html/body/form/div[4]/div[6]/table/tbody/tr/td/div/table[2]/tbody/tr[1]/td/div[2]/table/tbody"));
            // 获取 div_resultGrid 下的所有 tr 元素 每个tr元素都是一个row
            List<WebElement> rows = tbody.findElements(By.tagName("tr"));

            for (WebElement row : rows) {
                // 找到每行的第二个 td 元素（假设投诉编号在第二个 td 中）
                System.out.println("查看row的信息");
                System.out.println(row);
                // TODO 这里获取tag有问题
                List<WebElement> cells = row.findElements(By.tagName("td"));
                if (cells.size() > 1) {
                    WebElement cell_record_number = cells.get(1);
                    String cellText_record_number = cell_record_number.getText().trim();
                    WebElement cell_group = cells.get(4);
                    String cellText_group = cell_group.getText().trim();
                    System.out.print(cellText_record_number);
                    System.out.print(" ");
                    System.out.println(cellText_group);
                    System.out.println("开始判断是不是CN_DX字段");
                    if (cellText_record_number.length() > 0 && cellText_group.length() > 0 && cellText_group.contains("CN_DX")) {
                        System.out.print(cellText_record_number);
                        System.out.print(" ");
                        System.out.println(cellText_group);

                        // 已经初步找到合适的数据RRU_CN_DX Group User的record number 接下来查询出在西门子log中不存在的新数据
                        if(complaintNumbers.contains(cellText_record_number)) {
                            System.out.println("Complaint: " + cellText_record_number + " existed!");

                        }else{
                            //不存在的数据
                            System.out.println("Complaint: " + cellText_record_number + " is new record number!");
                            //获取到新record number对应的网页链接
                            WebElement link = cells.get(0).findElement(By.cssSelector("div span a"));
                            link.click();
                            flag = true;
                            try {
                                Thread.sleep(60000); // 等待30秒，实际使用中建议使用 WebDriverWait 这个报告的页面反应非常慢
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            // 获取所有窗口句柄
                            Set<String> windowHandles_1 = webDriver.getWindowHandles();
                            System.out.print("所有窗口的句柄的长度 ");
                            System.out.println(windowHandles_1.size());
                            System.out.print("所有窗口的内容: ");
                            System.out.println(windowHandles_1);
                            System.out.print("当前句柄-跳转具体record number report之前的句柄 ");
                            System.out.println(webDriver.getWindowHandle());
                            // 获取最新窗口的句柄
                            String latestWindowHandle = null;
                            for (String handle : windowHandles_1) {
                                latestWindowHandle = handle;
                            }
                            // 切换到最新窗口
                            if (latestWindowHandle != null) {
                                webDriver.switchTo().window(latestWindowHandle);
                                System.out.println("已切换到最新窗口");
                            }
                            // todo 处理报告里的内容 获取关键字段
                            //切换到对应的iframe
                            WebDriverWait wait_content = new WebDriverWait(webDriver, Duration.ofSeconds(15));
                            WebElement iframe_content = wait_content.until(ExpectedConditions.presenceOfElementLocated(By.id("record-pane-content-iframe")));
                            webDriver.switchTo().frame(iframe_content);
                            System.out.println("Switch to complaint content frame!");

                            //点击 details
                            WebElement detailsButton = webDriver.findElement(By.xpath("/html/body/div/form/div[4]/div/div[10]/div[3]/div[2]/div/div/div/div[3]/div[1]/h3/div/a"));
                            JavascriptExecutor js_go = (JavascriptExecutor) webDriver;
                            js_go.executeScript("arguments[0].click();", detailsButton);
                            System.out.println("Clicked the details button!");
                            // 点击了details button以后等待5s
                            try {
                                Thread.sleep(5000);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            //刷新窗口 因为我有了新的下拉窗口
                            // 获取所有窗口句柄
                            Set<String> windowHandles_2 = webDriver.getWindowHandles();
                            System.out.print("所有窗口的句柄的长度 ");
                            System.out.println(windowHandles_2.size());
                            System.out.print("所有窗口的句柄的内容 ");
                            System.out.println(windowHandles_2);
                            System.out.print("当前句柄-点击了details以后的句柄 ");
                            System.out.println(webDriver.getWindowHandle());
                            // 获取最新窗口的句柄
                            latestWindowHandle = null;
                            for (String handle : windowHandles_2) {
                                latestWindowHandle = handle;
                            }
                            // 切换到最新窗口
                            if (latestWindowHandle != null) {
                                webDriver.switchTo().window(latestWindowHandle);
                                System.out.println("已切换到最新窗口");
                            }

                            WebDriverWait wait_toggle = new WebDriverWait(webDriver, Duration.ofSeconds(15));
                            WebElement iframe_toggle = wait_toggle.until(ExpectedConditions.presenceOfElementLocated(By.id("record-pane-content-iframe")));
                            webDriver.switchTo().frame(iframe_toggle);
                            System.out.println("Switch to complaint toggle frame!");

                            //点击 regulartory  reports toggle paneal todo 看看能不能不点toggle 直接点击对应的FDA对应的report
                            WebElement reportButton = webDriver.findElement(By.xpath("/html/body/div/form/div[4]/div/div[10]/div[3]/div[2]/div/div/div/div[3]/div[1]/div/div[28]/div/h3/span"));
                            JavascriptExecutor js_report = (JavascriptExecutor) webDriver;
                            js_report.executeScript("arguments[0].click();", reportButton);
                            System.out.println("Clicked the regulatory report toggle panel button!");

                            //todo 遍历并且找到closed的FDA的link

                            //刷新窗口 因为我有了新的下拉窗口
                            // 获取所有窗口句柄
                            Set<String> windowHandles_3 = webDriver.getWindowHandles();
                            System.out.println("所有窗口的句柄的长度");
                            System.out.println(windowHandles_3.size());
                            System.out.println(windowHandles_3);
                            System.out.println("当前句柄-点击了details以后的句柄");
                            System.out.println(webDriver.getWindowHandle());
                            // 获取最新窗口的句柄
                            latestWindowHandle = null;
                            for (String handle : windowHandles_3) {
                                latestWindowHandle = handle;
                            }
                            // 切换到最新窗口
                            if (latestWindowHandle != null) {
                                webDriver.switchTo().window(latestWindowHandle);
                                System.out.println("已切换到最新窗口");
                            }


                            WebDriverWait wait_fda = new WebDriverWait(webDriver, Duration.ofSeconds(15));
                            WebElement iframe_fda = wait_fda.until(ExpectedConditions.presenceOfElementLocated(By.id("record-pane-content-iframe")));
                            webDriver.switchTo().frame(iframe_fda);
                            System.out.println("Switch to complaint regularoty report frame!");

                            String pageSource = webDriver.getPageSource();
                            // 保存 HTML 内容到文件
                            try (FileWriter writer = new FileWriter("complaint_content_regulatory_report.html")) {
                                writer.write(pageSource);
                                System.out.println("HTML 内容已保存到 complaint_content_regulatory_report.html 文件中。");
                            } catch (IOException e) {
                                throw new RuntimeException(e);
                            }

                            //点击 fda 对应的tbody的元素 看看能不能获取到
                            WebElement reports_tbody = webDriver.findElement(By.xpath("/html/body/div/form/div[4]/div/div[10]/div[3]/div[2]/div/div/div/div[3]/div[1]/div/div[28]/div/div/div[2]/div/div/div[1]/div[2]/div/table/tbody"));
                            System.out.println("fdaButton get daole " + reports_tbody);

                            List<WebElement> rows_reports = reports_tbody.findElements(By.tagName("tr"));

                            // 从第二个 tr 标签开始遍历（索引为 1）
                            for (int j = 1; j < rows_reports.size(); j++) {
                                WebElement row_r = rows_reports.get(j);
                                // 获取当前 tr 下的所有 td 元素
                                List<WebElement> cells_r = row_r.findElements(By.tagName("td"));

                                String regulatoryBody = null;
                                String status = null;

                                if (cells_r.size() > 1) {
                                    // 获取第二个 td 元素
                                    WebElement secondTd = cells_r.get(1);
                                    status = cells_r.get(10).getText();
                                    try {
                                        // 定位第二个 td 中的超链接元素
                                        Thread.sleep(5000);
                                        WebElement link_fda = secondTd.findElement(By.cssSelector("div.control-container a.pHyperLink"));
                                        // 点击超链接
                                        regulatoryBody = link_fda.getText();
                                        System.out.println(regulatoryBody + " " + status);
                                        System.out.println();
                                        if (regulatoryBody.contains("FDA") && status.equals("CLOSED")){
                                            link_fda.click();
                                            // 可以在这里添加等待新页面加载的代码，例如等待某个特定元素出现
                                            // WebElement newPageElement = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("newPageElementId")));
                                            // 处理新页面的逻辑，例如获取页面标题
                                            System.out.println("进入FDA报告的新页面: " + webDriver.getTitle());
                                            Thread.sleep(10000);
                                            clickViewReportAndExtractField();
                                        }

                                    } catch (Exception e) {
                                        System.out.println("未找到超链接或点击失败: " + e.getMessage());
                                    }
                                }
                            }
                            System.out.println("所有的regulatory reports遍历完毕 接下来应该关闭当前窗口 回到dashboard界面");

                            try {
                                Thread.sleep(10000); // 等待30秒，实际使用中建议使用 WebDriverWait
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            // 跳转回前一个页面 todo 如果完成了 view report 和 如果没有进入 的处理逻辑是不是不一样
                            webDriver.navigate().back();
                            // 由于返回上一个页面的时候会弹出All changes since last save will be lost!的alert框 所以出现这个弹窗以后就点击确认即可
                            try {
                                // 等待警告框出现
                                WebDriverWait wait_alert = new WebDriverWait(webDriver, Duration.ofSeconds(5));
                                wait_alert.until(ExpectedConditions.alertIsPresent());
                                // 获取警告框
                                org.openqa.selenium.Alert alert = webDriver.switchTo().alert();
                                // 获取警告框的文本信息
                                String alertText = alert.getText();
                                System.out.println("Alert text: " + alertText);
                                // 这里可以根据具体需求选择接受或者取消警告框
                                // 接受警告框（点击确定）
                                alert.accept();
                                // 取消警告框（点击取消）
                                // alert.dismiss();
                            } catch (org.openqa.selenium.NoAlertPresentException e) {
                                // 如果没有警告框弹出，继续执行后续操作
                                System.out.println("No alert present.");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            }
            System.out.println("dashboard中当前分页已经处理完毕 点击next page button进入下一页");

            //刷新窗口
            // 获取所有窗口句柄
            Set<String> windowHandles_r = webDriver.getWindowHandles();
            System.out.print("所有窗口的句柄的长度 ");
            System.out.println(windowHandles_r.size());
            System.out.print("所有窗口的句柄的内容 ");
            System.out.println(windowHandles_r);
            System.out.print("当前句柄为了分页刷新页面 ");
            System.out.println(webDriver.getWindowHandle());
            // 获取最新窗口的句柄
            String latestWindowHandle_r = null;
            for (String handle : windowHandles_r) {
                latestWindowHandle_r = handle;
            }
            // 切换到最新窗口
            if (latestWindowHandle_r != null) {
                webDriver.switchTo().window(latestWindowHandle_r);
                System.out.println("已切换到最新窗口");
            }
            // 获取next page button
            WebElement nextPageButton = webDriver.findElement(By.xpath("/html/body/form/div[4]/div[6]/table/tbody/tr/td/div/table[2]/tbody/tr[1]/td/div[2]/table/tfoot/tr/td/table/tbody/tr/td/div[3]/input[1]"));

            try {
                Thread.sleep(5000); // 等待5秒
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (i < totalPagesCount) {
                JavascriptExecutor js = (JavascriptExecutor) webDriver;
                js.executeScript("arguments[0].click();", nextPageButton);
                System.out.println("Clicked the next page button!");
                // 点击了next page button以后等待10s
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println("end!");
    }

    public void clickViewReportAndExtractField(){
        // todo 在新页面中点击view report 然后在开启的新页面中 提取出template表需要的字段 某些字段无法提取 需要汇报
        // 需要切换一下窗口句柄 因为新增了一个窗口
        // 获取所有窗口句柄
        Set<String> windowHandles_1 = webDriver.getWindowHandles();
        System.out.print("所有窗口的句柄的长度 ");
        System.out.println(windowHandles_1.size());
        System.out.print("所有窗口的句柄的内容 ");
        System.out.println(windowHandles_1);
        // 获取最新窗口的句柄
        String latestWindowHandle = null;
        for (String handle : windowHandles_1) {
            latestWindowHandle = handle;
        }
        // 切换到最新窗口
        if (latestWindowHandle != null) {
            webDriver.switchTo().window(latestWindowHandle);
            System.out.print("已切换到最新窗口 当前为 ");
            System.out.println(webDriver.getWindowHandle());
            windowHandlesList.add(webDriver.getWindowHandle());
        }

        String pageSource = webDriver.getPageSource();
        // 保存 HTML 内容到文件
        try (FileWriter writer = new FileWriter("page_before_click_view_report.html")) {
            writer.write(pageSource);
            System.out.println("HTML 内容已保存到 page_before_click_view_report.html 文件中。");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        // /html/body/div/form/div[4]/div/div[10]/div[3]/div[2]/div/div/div/div[1]/div/div/div[3]/ul/li[4]/span

        //点击 details
        WebElement detailsButton = webDriver.findElement(By.xpath("/html/body/div/form/div[4]/div/div[10]/div[3]/div[2]/div/div/div/div[1]/div/div/div[3]/ul/li[4]/span"));
        JavascriptExecutor js_go = (JavascriptExecutor) webDriver;
        js_go.executeScript("arguments[0].click();", detailsButton);
        System.out.println("Clicked the details button in new webpage");

        Set<String> windowHandles_2 = webDriver.getWindowHandles();
        System.out.print("所有窗口的句柄的长度 ");
        System.out.println(windowHandles_2.size());
        System.out.print("所有窗口的句柄的内容 ");
        System.out.println(windowHandles_2);
        // 获取最新窗口的句柄
        latestWindowHandle = null;
        for (String handle : windowHandles_2) {
            latestWindowHandle = handle;
        }
        // 切换到最新窗口
        if (latestWindowHandle != null) {
            webDriver.switchTo().window(latestWindowHandle);
            System.out.print("已切换到最新窗口 当前窗口为 ");
            System.out.println(webDriver.getWindowHandle());
        }

        //点击 view report
        // /html/body/div/form/div[4]/div/div[10]/div[3]/div[2]/div/div/div/div[3]/div[1]/div/div[2]/div/div[1]/div/div[1]/div/ul/li[2]/div[2]/a
        WebElement vieweportButton = webDriver.findElement(By.xpath("/html/body/div/form/div[4]/div/div[10]/div[3]/div[2]/div/div/div/div[3]/div[1]/div/div[2]/div/div[1]/div/div[1]/div/ul/li[2]/div[2]/a"));
        JavascriptExecutor js_view = (JavascriptExecutor) webDriver;
        js_view.executeScript("arguments[0].click();", vieweportButton);
        System.out.println("Clicked the vieweportButton in new webpage");

        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("进入view report界面");

        // 刷新 开始获取view report界面里的字段
        // 获取所有窗口句柄
        Set<String> windowHandles_v = webDriver.getWindowHandles();
        System.out.print("所有窗口的句柄的长度 ");
        System.out.println(windowHandles_v.size());
        System.out.print("所有窗口的句柄的内容 ");
        System.out.println(windowHandles_v);
        // 获取最新窗口的句柄
        String latestWindowHandle_v = null;
        for (String handle : windowHandles_v) {
            latestWindowHandle_v = handle;
        }
        // 切换到最新窗口
        if (latestWindowHandle_v != null) {
            webDriver.switchTo().window(latestWindowHandle_v);
            System.out.print("已切换到最新窗口 当前窗口为");
            System.out.println(webDriver.getWindowHandle());
            windowHandlesList.add(webDriver.getWindowHandle());
        }

        //todo 逐步提取到这个页面上的内容
        WebElement ageLabel = webDriver.findElement(By.xpath("/html/body/form/div[7]/div/div[2]/div/div[1]/div/div/div[3]/div/div/div/div/div[3]/fieldset/div[1]/div/ul/li[1]/div/label"));
        System.out.println(ageLabel.getText());

        //处理完当前页面上的所有元素 关闭当前窗口
        webDriver.close();
        windowHandlesList.remove(windowHandlesList.size() - 1);
        System.out.print("关闭了view report界面以后的 当前所有句柄展示 ");
        System.out.println(webDriver.getWindowHandles());
    }
}